/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileInterceptor } from "@nestjs/platform-express";
import { AudioService } from "../audio.service";
import { AudioCreateInput } from "./AudioCreateInput";
import { Audio } from "./Audio";
import { AudioFindManyArgs } from "./AudioFindManyArgs";
import { AudioWhereUniqueInput } from "./AudioWhereUniqueInput";
import { AudioUpdateInput } from "./AudioUpdateInput";

export class AudioControllerBase {
  constructor(protected readonly service: AudioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Audio })
  async createAudio(@common.Body() data: AudioCreateInput): Promise<Audio> {
    return await this.service.createAudio({
      data: {
        ...data,

        document: data.document
          ? {
              connect: data.document,
            }
          : undefined,
      },
      select: {
        audioFile: true,
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Audio] })
  @ApiNestedQuery(AudioFindManyArgs)
  async audioItems(@common.Req() request: Request): Promise<Audio[]> {
    const args = plainToClass(AudioFindManyArgs, request.query);
    return this.service.audioItems({
      ...args,
      select: {
        audioFile: true,
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Audio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async audio(
    @common.Param() params: AudioWhereUniqueInput
  ): Promise<Audio | null> {
    const result = await this.service.audio({
      where: params,
      select: {
        audioFile: true,
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Audio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAudio(
    @common.Param() params: AudioWhereUniqueInput,
    @common.Body() data: AudioUpdateInput
  ): Promise<Audio | null> {
    try {
      return await this.service.updateAudio({
        where: params,
        data: {
          ...data,

          document: data.document
            ? {
                connect: data.document,
              }
            : undefined,
        },
        select: {
          audioFile: true,
          createdAt: true,

          document: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Audio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAudio(
    @common.Param() params: AudioWhereUniqueInput
  ): Promise<Audio | null> {
    try {
      return await this.service.deleteAudio({
        where: params,
        select: {
          audioFile: true,
          createdAt: true,

          document: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/audioFile")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: Audio,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadAudioFile(
    @common.Param()
    params: AudioWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<Audio> {
    return this.service.uploadAudioFile(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/audioFile")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadAudioFile(
    @common.Param()
    params: AudioWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadAudioFile({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/audioFile")
  @swagger.ApiOkResponse({
    type: Audio,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteAudioFile(
    @common.Param()
    params: AudioWhereUniqueInput
  ): Promise<Audio> {
    return this.service.deleteAudioFile({
      where: params,
    });
  }
}
