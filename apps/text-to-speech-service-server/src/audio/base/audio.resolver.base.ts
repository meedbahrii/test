/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { Audio } from "./Audio";
import { AudioCountArgs } from "./AudioCountArgs";
import { AudioFindManyArgs } from "./AudioFindManyArgs";
import { AudioFindUniqueArgs } from "./AudioFindUniqueArgs";
import { CreateAudioArgs } from "./CreateAudioArgs";
import { UpdateAudioArgs } from "./UpdateAudioArgs";
import { DeleteAudioArgs } from "./DeleteAudioArgs";
import { Document } from "../../document/base/Document";
import { AudioService } from "../audio.service";
@graphql.Resolver(() => Audio)
export class AudioResolverBase {
  constructor(protected readonly service: AudioService) {}

  async _audioItemsMeta(
    @graphql.Args() args: AudioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Audio])
  async audioItems(@graphql.Args() args: AudioFindManyArgs): Promise<Audio[]> {
    return this.service.audioItems(args);
  }

  @graphql.Query(() => Audio, { nullable: true })
  async audio(
    @graphql.Args() args: AudioFindUniqueArgs
  ): Promise<Audio | null> {
    const result = await this.service.audio(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Audio)
  async createAudio(@graphql.Args() args: CreateAudioArgs): Promise<Audio> {
    return await this.service.createAudio({
      ...args,
      data: {
        ...args.data,

        document: args.data.document
          ? {
              connect: args.data.document,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Audio)
  async updateAudio(
    @graphql.Args() args: UpdateAudioArgs
  ): Promise<Audio | null> {
    try {
      return await this.service.updateAudio({
        ...args,
        data: {
          ...args.data,

          document: args.data.document
            ? {
                connect: args.data.document,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Audio)
  async deleteAudio(
    @graphql.Args() args: DeleteAudioArgs
  ): Promise<Audio | null> {
    try {
      return await this.service.deleteAudio(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Audio)
  async uploadAudioFile(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: AudioFindUniqueArgs
  ): Promise<Audio> {
    return await this.service.uploadAudioFile(args, file);
  }

  @graphql.Mutation(() => Audio)
  async deleteAudioFile(
    @graphql.Args()
    args: AudioFindUniqueArgs
  ): Promise<Audio> {
    return await this.service.deleteAudioFile(args);
  }

  @graphql.ResolveField(() => Document, {
    nullable: true,
    name: "document",
  })
  async getDocument(@graphql.Parent() parent: Audio): Promise<Document | null> {
    const result = await this.service.getDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
