/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Audio as PrismaAudio,
  Document as PrismaDocument,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class AudioServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.AudioCountArgs, "select">): Promise<number> {
    return this.prisma.audio.count(args);
  }

  async audioItems(args: Prisma.AudioFindManyArgs): Promise<PrismaAudio[]> {
    return this.prisma.audio.findMany(args);
  }
  async audio(args: Prisma.AudioFindUniqueArgs): Promise<PrismaAudio | null> {
    return this.prisma.audio.findUnique(args);
  }
  async createAudio(args: Prisma.AudioCreateArgs): Promise<PrismaAudio> {
    return this.prisma.audio.create(args);
  }
  async updateAudio(args: Prisma.AudioUpdateArgs): Promise<PrismaAudio> {
    return this.prisma.audio.update(args);
  }
  async deleteAudio(args: Prisma.AudioDeleteArgs): Promise<PrismaAudio> {
    return this.prisma.audio.delete(args);
  }

  async uploadAudioFile<T extends Prisma.AudioFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaAudio> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "audioFile";
    const audioFile = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.audio.update({
      where: args.where,

      data: {
        audioFile: audioFile as InputJsonValue,
      },
    });
  }

  async downloadAudioFile<T extends Prisma.AudioFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioFindUniqueArgs>
  ): Promise<FileDownload> {
    const { audioFile } = await this.prisma.audio.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      audioFile as unknown as LocalStorageFile
    );
  }

  async deleteAudioFile<T extends Prisma.AudioFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioFindUniqueArgs>
  ): Promise<PrismaAudio> {
    const { audioFile } = await this.prisma.audio.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      audioFile as unknown as LocalStorageFile
    );

    return await this.prisma.audio.update({
      where: args.where,

      data: {
        audioFile: Prisma.DbNull,
      },
    });
  }

  async getDocument(parentId: string): Promise<PrismaDocument | null> {
    return this.prisma.audio
      .findUnique({
        where: { id: parentId },
      })
      .document();
  }
}
